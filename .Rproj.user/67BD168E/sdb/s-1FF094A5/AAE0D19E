{
    "contents" : "rm(list = ls())    # clean memory (this is a comment)\n# Load libraries (this is a comment line)\nlibrary(sp)\nlibrary(rgdal)\nlibrary(gstat)\nlibrary(rgeos)\n\nsetwd(\"M:/GRS30306-Geostat/\")  # specify proper path\ngeul <- read.table(\"data/geuldata.txt\", header = TRUE)\ndim(geul)\nnames(geul)\nsummary(geul)\nclass(geul)\n\ngeul\ngeul$pb\nmean(geul$pb)\nmax(geul$x)\nmedian(geul$y)\n\nhist(geul$pb, main = \"Topsoil lead concentration Geul valley\")\n\nhist(log(geul$pb), main = \"Log-transformed topsoil lead concentration Geul valley\")\n\ncoordinates(geul) <- ~x+y\nstudarea <- readOGR(\"data/mask_aoi_shp.shp\", \"mask_aoi_shp\")\nspplot(geul, zcol = \"pb\", xlim = c(190000,192000),\n       ylim = c(314000,316000),cex = 1.4, main = \"Pb data\",\n       key.space = list(x = 0.02, y = 0.26, corner = c(0,1)),\n       sp.layout = list(\"sp.polygons\", studarea),\n       col.regions = bpy.colors(5))\n\n# Plot with digital elevation model and river stream\ndem <- readGDAL(\"data/geul_dem.txt\")\n# Read and display DEM and outline of river\nriverline <- readOGR(\"data/river_line.shp\", \"river_line\")\nspplot(dem, col.regions = bpy.colors(), main = \n         \"Pb vs. elevation & location river\", sp.layout = \n         list(list(\"sp.lines\", gBoundary(studarea), col=\"white\", lty=3, \n                   lwd=1), list(\"sp.lines\", riverline, col=\"white\", lwd=2),\n              list(\"sp.points\", geul, cex=geul$pb/250, pch=19, col='green')))\n\n# Read and display map Euclidean distance to river\ndis <- readGDAL(\"data/river_dist.txt\")\nspplot(dis, col.regions = bpy.colors(),main = \n         \"Pb vs. distance to river\", sp.layout = list(\"sp.points\", geul, \n            cex=geul$pb/250, pch=19, col='green'), checkEmptyRC = FALSE)\n\n# Slope etc can also be computed in R using raster, for example\n# rasterDem <- raster(dem)\n# prj_string_RD <- CRS(\"+proj=sterea +lat_0=52.15616055555555 +lon_0=5.38763888888889 \n# +k=0.9999079 +x_0=155000 +y_0=463000 +ellps=bessel +towgs84=565.2369,50.0087,465.658,\n# -0.406857330322398,0.350732676542563,-1.8703473836068,4.0812 +units=m +no_defs\")\n# crs(rasterDem) <- prj_string_RD\n# rasterslope <- terrain(rasterDem, unit=\"degrees\")\n\n# Compute floodplain edges via slopeSs\nslope <- readGDAL(\"data/geul_slope.txt\")   # slope in degrees\nslope$steep <- ifelse(slope$band1 >= 2, 1, NA)\n\n# Compute distance from edges using raster library\nlibrary(raster)\nslopedist <- distance(raster(slope[\"steep\"]))\nslopedist <- as(slopedist, \"SpatialGridDataFrame\")\ndetach(\"package:raster\", unload=F)  # unload to avoid later confusion\nspplot(slopedist, col.regions = bpy.colors(),main = \n      \"Pb vs. slope_distance\", sp.layout = list(list(\"sp.lines\",\n      gBoundary(studarea), col=\"white\", lty=3, lwd=1), \n      list(\"sp.points\", geul, cex=geul$pb/250, pch=19, col='green')), \n      checkEmptyRC = FALSE) \n\n\ngpb <- gstat(formula = pb~1, data = geul)\nvgpb <- variogram(gpb)\nplot(vgpb)\nvgpb <- variogram(gpb, boundaries = c(0, 1:10*50, 600, 700, 800))\n\nvgmpb <- vgm(nugget = 3000, psill = 27000, range = 170, model = \"Exp\")\nplot(vgpb, vgmpb, plot.nu = T)\nvgmpb <- fit.variogram(vgpb, vgmpb, fit.method=7)\nplot(vgpb, vgmpb)\nvgmpb\n\n# SSErr attribute is (weighted) sum of squared errors according to fit criterion\nattr(vgmpb, \"SSErr\")\n\nvgmpb2 <- vgm(psill = 14000, range = 150, model = \"Sph\", \n              add.to = vgm(psill = 16000, range = 500, model = \"Sph\"))\nvgmpb2 <- fit.variogram(vgpb, vgmpb2, fit.method=7)\nplot(vgpb, vgmpb2)\nvgmpb2\nattr(vgmpb2, \"SSErr\")  \n\n# Look at anisotropies: variogram map\nvgpb_map  <- variogram(gpb, cutoff=700, width=70, map=TRUE)\nplot(vgpb_map, col.regions = bpy.colors(), main=\"pb~1\", at=0:100*1500)\n# In case above didn't work (probably forgot detaching raster)\nspplot(vgpb_map$map[1], scales=list(draw=T), col.regions = bpy.colors())\n# Look at anisotropies: alpha and tol.hor\nvgpb_dir  <- variogram(pb~1, data = geul,alpha=c(60,150), tol.hor=45, cutoff = 800, width=80)\nplot(vgpb_dir,ylim=c(0,40000), main=\"directional variogram\")\n# Fit to longest axis\nvgpb_150  <- variogram(pb~1, data = geul,alpha=150, tol.hor=45, cutoff = 800, width=80)\nvgmpb_150 <- vgm(25000, \"Exp\", 200)\nvgmpb_150 <- fit.variogram(vgpb_150, vgmpb_150)\nvgmpb_150\nplot(vgpb_150, vgmpb_150)\n# Fit to shortest axix\nvgpb_60  <- variogram(pb~1, data = geul,alpha=60, tol.hor=45, cutoff = 800, width=80)\nplot(vgpb_60)\nvgmpb_60 <- vgm(30487, \"Exp\", 50)\nvgmpb_60 <- fit.variogram(vgpb_60, vgmpb_60, fit.sills = FALSE)\nplot(vgpb_60, vgmpb_60)\nvgmpb_60\n# Make it a single model\nani_ratio =vgmpb_60$range/vgmpb_150$range\nani_ratio\nvgmpb_dir <- vgm(30487, \"Exp\", 249, anis=c(150, 0.5))\nvgmpb_dir <- fit.variogram(vgpb_dir, vgmpb_dir)\nvgmpb_dir\nplot(vgpb_dir, vgmpb_dir)\n\n# Plot the model\n# Create 2D image of variogrammodel\nvgm_value <- function(dist, dir_x, dir_y) \n  variogramLine(vgmpb_dir, dir=c(dir_x, dir_y, 0), min=1, dist_vector=dist)$gamma\n\ngrid <- expand.grid(x=-125:125*5, y=-125:125*5)\ngrid$dist <- sqrt(grid$x^2 + grid$y^2)\nang <- atan2(grid$y,grid$x)\ngrid$dirx <- cos(ang)\ngrid$diry <- sin(ang)\ngrid$semvar <- mapply(vgm_value, grid$dist, grid$dirx, grid$diry)\ngrid$semvar[which(grid$dist==0)] <- 0\nrm(ang)\ncoordinates(grid) <- ~x+y\ngridded(grid) <- T\nspplot(grid, zcol=\"semvar\", scales=list(T), col.regions=bpy.colors(100),\n       par.settings=list(fontsize=list(text=16)))\n\n# Residual variogram - Regression kriging\n# Add explanatory data to geul object and inspect correlations\ngeul$elev <- over(geul, dem)[[1]]   # we need data from data frame\ngeul$riverdist <- over(geul, dis)$band1  # alternative way\ngeul$slop <- over(geul, slope)$band1\ngeul$slopedist <- over(geul, slopedist)[[1]]\nplot(geul$elev, geul$pb)  # exploratory scatterplot\nplot(geul$riverdist, geul$pb)  # idem \n# ... etc.\nplot(geul@data)\ncor(geul@data)\n\n# Example RK with slopedist\nreg <- lm(pb~slopedist, geul)\nhist(reg$residuals)  # cf raw Pb data\ngeul$resid <- reg$residuals\nvgres  <- variogram(resid~1, geul)\nplot(vgres)\nvgmres <- vgm(20000, \"Exp\", 135, 2000)\nvgmres <- fit.variogram(vgres, vgmres)\nplot(vgres, vgmres)\nplot(variogramLine(vgmpb, 700), col = \"red\", ty=\"l\", lwd=2.5)\nlines(variogramLine(vgmres, 700), col = \"blue\", ty=\"l\",lwd=2.5)\nlegend(\"bottomright\", c(\"Pb\", \"Residuals\"), lty=1, lwd=2.5, col=c(\"red\", \"blue\"))\nvgmpb\nsum(vgmpb[\"psill\"])\nvgmres\nsum(vgmres[\"psill\"])\n## Regression kriging\n(sum(vgmpb[\"psill\"])-sum(vgmres[\"psill\"]))/sum(vgmpb[\"psill\"])\n\nsummary(reg)\n\n## Practical part 2 ##\n\ngeul.xv <-krige.cv(pb~1, geul, vgmpb)\n\ngeul.xv.stat <- summary(geul.xv$zscore)\ngeul.xv.std <- sd(geul.xv$zscore)\n\n  bubble(geul.xv, zcol = \"residual\", maxsize = 3, key.entries = c(-330,-200, -100,-50,0,50,100,200,330), main = \n           \"cross-validation residuals, OK\", sp.layout = list(list(\"sp.polygons\", studarea), \n                                                              list(\"sp.lines\", riverline, col = \"blue\", lwd=2)))\n\nmask_location <- readGDAL(\"data/geul_mask.txt\")\n\ngeul.block.kriging <- krige(pb~1, geul ,mask_location,block = c(25,25), vgmpb2)\nspplot(geul.kriging, zcol = \"var1.var\", main = \"Kriging Pb\")\n\n\ngeul.block.kriging$sd <- sqrt(geul.block.kriging$var1.var)\n\nspplot(geul.block.kriging, zcol = \"sd\", main = \"Stdv map\")\n\ngeul.block.kriging$safe <- factor(ifelse(geul.block.kriging$var1.pred > 250,1, 0), levels=c(0,1), labels=c(\"safe\",\"hazard\"))\n\nspplot(geul.block.kriging, zcol = \"safe\", main = \"Safety classification\")\n\ngeul.block.kriging$safety <- qnorm(0.95, mean = geul.kriging$var1.pred, geul.kriging$sd, T, F)\n\nspplot(geul.block.kriging, \"safety\", main = \"Safety classification\")\n\ngeul.block.kriging$regionsafe <- factor(ifelse(geul.block.kriging$safety > 250,1, 0), levels=c(0,1), labels=c(\"safe\",\"hazard\"))\n\nspplot(geul.block.kriging, \"regionsafe\", main = \"Safety classification\")\n\n\ngeul.sim <- krige(pb~1, geul, newdata=mask, vgmpb2, nsim=9, nmax=24)\nnames(geul.sim)\nspplot(geul.sim, zcol = \"sim1\", xlim=c(190200,191300), ylim =\n         c(314300,315600), col.regions = bpy.colors())\nspplot(geul.sim[1:6], xlim=c(190200,191300), ylim =\n         c(314300,315600), col.regions = bpy.colors())",
    "created" : 1429516528360.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "432462333",
    "id" : "AAE0D19E",
    "lastKnownWriteTime" : 1429093455,
    "path" : "M:/GRS30306-Geostat/geul2015_part1(1).R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}